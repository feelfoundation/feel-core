@Library('feel-jenkins') _

properties([
  parameters([
    string(name: 'NETWORK', description: 'To Run test against a network', ),
    string(name: 'STRESS_COUNT', defaultValue: '500', description: 'Number of transactions to create', ), // Used by stage: Test Network Stress
    booleanParam(name: 'CLEAN_UP', defaultValue: false, description: 'Destroy deployed nodes when done testing', ),
  ])
])

pipeline {
  agent { node { label 'feel-core' } }
  options { disableConcurrentBuilds() }
  stages {
    stage('Build') {
      steps {
        dir('qa') {
          nvm(getNodejsVersion()) {
            sh 'npm ci'
            sh 'npm run tools:peers:seed:node'
            sh 'npm run tools:peers:network:nodes'
          }
        }
      }
    }
    stage('Test Scenarios') {
      options {
        timeout(time: 30, unit: 'MINUTES')
      }
      steps {
        retry(2) {
          timestamps {
            dir('qa') {
              nvm(getNodejsVersion()) {
                ansiColor('xterm') {
                  sh 'npm run features || true'
                }
              }
            }
          }
        }
      }
    }
    stage('Test Network Stress') {
      options {
        timeout(time: 1, unit: 'HOURS')
      }
      steps {
        timestamps {
          dir('qa') {
            nvm(getNodejsVersion()) {
              ansiColor('xterm') {
                sh 'npm run stress:generic || true'
                sh 'npm run stress:diversified'
              }
            }
          }
        }
      }
    }
  }
  post {
    always {
      allure includeProperties: false, jdk: '', results: [[path: 'qa/output']]
    }
    failure {
      script {
        if (env.CLEAN_UP == "true") {
          ansibleTower \
            towerServer: 'tower',
            templateType: 'job',
            jobTemplate: '16',  // devnet-archive-logs
            jobType: 'run',
            extraVars: """devnet: ${params.NETWORK}""",
            throwExceptionWhenFail: false,
            verbose: false
        }
      }
      feelSlackSend('danger', "Build failed (<${env.BUILD_URL}/console|console>, <${env.BUILD_URL}/changes|changes>)", 'feel-ci-core')
    }
    cleanup {
      script {
        if (env.CLEAN_UP == "true") {
          ansibleTower \
            towerServer: 'tower',
            templateType: 'job',
            jobTemplate: '15',  // do-destroy-tag
            jobType: 'run',
            extraVars: """do_tag: ${params.NETWORK}_node""",
            throwExceptionWhenFail: false,
            verbose: false
        } else {
          echo 'Not cleaning up, as requested.'
        }
      }
    }
  }
}
// vim: filetype=groovy
