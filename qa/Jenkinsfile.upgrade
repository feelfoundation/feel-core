@Library('feel-jenkins') _

properties([
  parameters([
    string(name: 'SDK_BRANCH_NAME', defaultValue: 'development', description: 'Feel SDK branch name', ),
    string(name: 'CORE_BRANCH_NAME', defaultValue: 'master', description: 'Feel core branch name', ),
    string(name: 'NETWORK', defaultValue: 'testnet', description: 'To Run test against a network', ),
    string(name: 'NEWRELIC_ENABLED', defaultValue: 'no', description: 'Enable NewRelic', ),
  ])
])

pipeline {
  agent { node { label 'feel-core' } }
  options { disableConcurrentBuilds() }
  stages {
    stage('Build') {
      steps {
        dir('qa') {
          nvm(getNodejsVersion()) {
            sh 'npm ci'
          }
        }
      }
    }
    stage('Trigger core build') {
      steps {
        script {
          def b = build job: 'feel-qa/feel-core-build-dev',
                  parameters: [string(name: 'COMMITISH_SDK', value: """${params.SDK_BRANCH_NAME}"""),
                   string(name: 'COMMITISH_CORE', value: """${params.CORE_BRANCH_NAME}""")]
          env.BUILT_FEEL_VERSION = b.getBuildVariables().get('FEEL_VERSION')
        }
      }
    }
    stage('Deploy node') {
      steps {
        sh '''
        curl --silent https://downloads.feel.surf/feel/${NETWORK%net}/latest.txt --output latest.txt
        cat latest.txt
        date +%s |tee timestamp.txt
        '''
        script {
          env.FEEL_VERSION = readFile('latest.txt').trim()
          env.TIMESTAMP = readFile('timestamp.txt').trim()
          sh 'echo ams3-jenkins-$NETWORK-$TIMESTAMP.feeldev.net >.droplet_fqdn'
        }
        retry(5) {
          ansiColor('xterm') {
            ansibleTower \
              towerServer: 'tower',
              templateType: 'job',
              jobTemplate: '10',  // feel-self-service
              jobType: 'run',
              extraVars: """user_name: 'jenkins'
user_pubkey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDRSmkDPwDuzs74e4Dm3BdUV5KS+fkcwImljKLm77rp5gH84JdidO/iDCTLWQmSq3qJBwzs5U1RubCy9uMSMNou2WZITbHOVUr4Hr9TndWS59ilNCas4V20dw/1gxg+3JvxY3hjLt3b4vBRoliyoxreT/MvLC64xah8HwqstTqkY9xHMCbooImxS/aLWNGPA0AwM6PMFlH8fzEmSeHVL3ki/8BL9hQtCYabqlctabucOYDQHKSQ8ZpVHnMjMFCzH7v0rdk30AY8gQN19mbrnTj7+Mcrfr4QrRaarwx+oxNcMFT960b/Q92hXESGUuqJ3uwx+vdRd7JgIFCtCXgABlqF do_tower_devnet'
droplet_name: '${params.NETWORK}-${env.TIMESTAMP}'
devnet: ${params.NETWORK}
feel_version: '${env.FEEL_VERSION}'
droplet_size: 'g-2vcpu-8gb'
jenkins_ci: 'yes'
newrelic_enabled: '${params.NEWRELIC_ENABLED}'""",
              importTowerLogs: true,
              throwExceptionWhenFail: true,
              verbose: false
          }
        }
      }
    }
    stage('Upgrade node') {
      steps {
        script {
          env.DROPLET_FQDN = readFile('.droplet_fqdn').trim()
        }
        retry(5) {
          ansiColor('xterm') {
            ansibleTower \
              towerServer: 'tower',
              templateType: 'job',
              jobTemplate: '19',  // feel-self-upgrade
              jobType: 'run',
              extraVars: """droplet_fqdn: '${env.DROPLET_FQDN}'
devnet: ${params.NETWORK}
feel_version: '${env.BUILT_FEEL_VERSION}'""",
              importTowerLogs: true,
              throwExceptionWhenFail: true,
              verbose: false
          }
        }
      }
    }
    stage('Test upgrade') {
      steps {
        script {
          env.DROPLET_FQDN = readFile('.droplet_fqdn').trim()
        }
        dir('qa') {
          retry(5) {
            nvm(getNodejsVersion()) {
              sh '''
              npm run tools:peers:upgrade:node
              npm run test:blockchain
              '''
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      ansibleTower \
        towerServer: 'tower',
        templateType: 'job',
        jobTemplate: '11',  // feel-self-service-destroy
        jobType: 'run',
        extraVars: """user_name: 'jenkins'
droplet_name: '${params.NETWORK}-${env.TIMESTAMP}'""",
        throwExceptionWhenFail: false,
        verbose: false
    }
  }
}
// vim: filetype=groovy
